// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: adjacent_list.proto
// Protobuf C++ Version: 5.27.1

#include "adjacent_list.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace graphar {
namespace proto {

inline constexpr AdjacentList_Statistics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : edge_nums_of_vertex_chunks_{},
        _edge_nums_of_vertex_chunks_cached_byte_size_{0},
        num_vertices_{::int64_t{0}},
        num_vertex_chunks_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AdjacentList_Statistics::AdjacentList_Statistics(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AdjacentList_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdjacentList_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdjacentList_StatisticsDefaultTypeInternal() {}
  union {
    AdjacentList_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdjacentList_StatisticsDefaultTypeInternal _AdjacentList_Statistics_default_instance_;

inline constexpr AdjacentList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        statistics_{nullptr},
        type_{static_cast< ::graphar::proto::AdjListType >(0)},
        file_type_{static_cast< ::graphar::proto::FileType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AdjacentList::AdjacentList(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AdjacentListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdjacentListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdjacentListDefaultTypeInternal() {}
  union {
    AdjacentList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdjacentListDefaultTypeInternal _AdjacentList_default_instance_;
}  // namespace proto
}  // namespace graphar
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_adjacent_5flist_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_adjacent_5flist_2eproto = nullptr;
const ::uint32_t
    TableStruct_adjacent_5flist_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList_Statistics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList_Statistics, _impl_.num_vertices_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList_Statistics, _impl_.num_vertex_chunks_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList_Statistics, _impl_.edge_nums_of_vertex_chunks_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList, _impl_.file_type_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList, _impl_.prefix_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::AdjacentList, _impl_.statistics_),
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::graphar::proto::AdjacentList_Statistics)},
        {11, 23, -1, sizeof(::graphar::proto::AdjacentList)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::graphar::proto::_AdjacentList_Statistics_default_instance_._instance,
    &::graphar::proto::_AdjacentList_default_instance_._instance,
};
const char descriptor_table_protodef_adjacent_5flist_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023adjacent_list.proto\022\rgraphar.proto\032\013en"
    "ums.proto\"\202\003\n\014AdjacentList\022.\n\004type\030\001 \001(\016"
    "2\032.graphar.proto.AdjListTypeR\004type\0224\n\tfi"
    "le_type\030\002 \001(\0162\027.graphar.proto.FileTypeR\010"
    "fileType\022\026\n\006prefix\030\003 \001(\tR\006prefix\022K\n\nstat"
    "istics\030\004 \001(\0132&.graphar.proto.AdjacentLis"
    "t.StatisticsH\000R\nstatistics\210\001\001\032\227\001\n\nStatis"
    "tics\022!\n\014num_vertices\030\001 \001(\003R\013numVertices\022"
    "*\n\021num_vertex_chunks\030\002 \001(\003R\017numVertexChu"
    "nks\022:\n\032edge_nums_of_vertex_chunks\030\003 \003(\003R"
    "\026edgeNumsOfVertexChunksB\r\n\013_statisticsB\207"
    "\001\n\035org.apache.graphar.info.protoB\021Adjace"
    "ntListProtoP\001\242\002\003GPX\252\002\rGraphar.Proto\312\002\rGr"
    "aphar\\Proto\342\002\031Graphar\\Proto\\GPBMetadata\352"
    "\002\016Graphar::Protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_adjacent_5flist_2eproto_deps[1] =
    {
        &::descriptor_table_enums_2eproto,
};
static ::absl::once_flag descriptor_table_adjacent_5flist_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_adjacent_5flist_2eproto = {
    false,
    false,
    584,
    descriptor_table_protodef_adjacent_5flist_2eproto,
    "adjacent_list.proto",
    &descriptor_table_adjacent_5flist_2eproto_once,
    descriptor_table_adjacent_5flist_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_adjacent_5flist_2eproto::offsets,
    file_level_enum_descriptors_adjacent_5flist_2eproto,
    file_level_service_descriptors_adjacent_5flist_2eproto,
};
namespace graphar {
namespace proto {
// ===================================================================

class AdjacentList_Statistics::_Internal {
 public:
};

AdjacentList_Statistics::AdjacentList_Statistics(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:graphar.proto.AdjacentList.Statistics)
}
inline PROTOBUF_NDEBUG_INLINE AdjacentList_Statistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::graphar::proto::AdjacentList_Statistics& from_msg)
      : edge_nums_of_vertex_chunks_{visibility, arena, from.edge_nums_of_vertex_chunks_},
        _edge_nums_of_vertex_chunks_cached_byte_size_{0},
        _cached_size_{0} {}

AdjacentList_Statistics::AdjacentList_Statistics(
    ::google::protobuf::Arena* arena,
    const AdjacentList_Statistics& from)
    : ::google::protobuf::Message(arena) {
  AdjacentList_Statistics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_vertices_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, num_vertices_),
           offsetof(Impl_, num_vertex_chunks_) -
               offsetof(Impl_, num_vertices_) +
               sizeof(Impl_::num_vertex_chunks_));

  // @@protoc_insertion_point(copy_constructor:graphar.proto.AdjacentList.Statistics)
}
inline PROTOBUF_NDEBUG_INLINE AdjacentList_Statistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : edge_nums_of_vertex_chunks_{visibility, arena},
        _edge_nums_of_vertex_chunks_cached_byte_size_{0},
        _cached_size_{0} {}

inline void AdjacentList_Statistics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_vertices_),
           0,
           offsetof(Impl_, num_vertex_chunks_) -
               offsetof(Impl_, num_vertices_) +
               sizeof(Impl_::num_vertex_chunks_));
}
AdjacentList_Statistics::~AdjacentList_Statistics() {
  // @@protoc_insertion_point(destructor:graphar.proto.AdjacentList.Statistics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AdjacentList_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AdjacentList_Statistics::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_._cached_size_),
              false,
          },
          &AdjacentList_Statistics::MergeImpl,
          &AdjacentList_Statistics::kDescriptorMethods,
          &descriptor_table_adjacent_5flist_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AdjacentList_Statistics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AdjacentList_Statistics_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::graphar::proto::AdjacentList_Statistics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 num_vertices = 1 [json_name = "numVertices"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AdjacentList_Statistics, _impl_.num_vertices_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.num_vertices_)}},
    // int64 num_vertex_chunks = 2 [json_name = "numVertexChunks"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AdjacentList_Statistics, _impl_.num_vertex_chunks_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.num_vertex_chunks_)}},
    // repeated int64 edge_nums_of_vertex_chunks = 3 [json_name = "edgeNumsOfVertexChunks"];
    {::_pbi::TcParser::FastV64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.edge_nums_of_vertex_chunks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 num_vertices = 1 [json_name = "numVertices"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.num_vertices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 num_vertex_chunks = 2 [json_name = "numVertexChunks"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.num_vertex_chunks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated int64 edge_nums_of_vertex_chunks = 3 [json_name = "edgeNumsOfVertexChunks"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.edge_nums_of_vertex_chunks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AdjacentList_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:graphar.proto.AdjacentList.Statistics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_nums_of_vertex_chunks_.Clear();
  ::memset(&_impl_.num_vertices_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_vertex_chunks_) -
      reinterpret_cast<char*>(&_impl_.num_vertices_)) + sizeof(_impl_.num_vertex_chunks_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AdjacentList_Statistics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graphar.proto.AdjacentList.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 num_vertices = 1 [json_name = "numVertices"];
  if (this->_internal_num_vertices() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_num_vertices(), target);
  }

  // int64 num_vertex_chunks = 2 [json_name = "numVertexChunks"];
  if (this->_internal_num_vertex_chunks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_num_vertex_chunks(), target);
  }

  // repeated int64 edge_nums_of_vertex_chunks = 3 [json_name = "edgeNumsOfVertexChunks"];
  {
    int byte_size = _impl_._edge_nums_of_vertex_chunks_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_edge_nums_of_vertex_chunks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graphar.proto.AdjacentList.Statistics)
  return target;
}

::size_t AdjacentList_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphar.proto.AdjacentList.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated int64 edge_nums_of_vertex_chunks = 3 [json_name = "edgeNumsOfVertexChunks"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_edge_nums_of_vertex_chunks())
    ;
    _impl_._edge_nums_of_vertex_chunks_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int64 num_vertices = 1 [json_name = "numVertices"];
  if (this->_internal_num_vertices() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_vertices());
  }

  // int64 num_vertex_chunks = 2 [json_name = "numVertexChunks"];
  if (this->_internal_num_vertex_chunks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_vertex_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AdjacentList_Statistics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AdjacentList_Statistics*>(&to_msg);
  auto& from = static_cast<const AdjacentList_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graphar.proto.AdjacentList.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_edge_nums_of_vertex_chunks()->MergeFrom(from._internal_edge_nums_of_vertex_chunks());
  if (from._internal_num_vertices() != 0) {
    _this->_impl_.num_vertices_ = from._impl_.num_vertices_;
  }
  if (from._internal_num_vertex_chunks() != 0) {
    _this->_impl_.num_vertex_chunks_ = from._impl_.num_vertex_chunks_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AdjacentList_Statistics::CopyFrom(const AdjacentList_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphar.proto.AdjacentList.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AdjacentList_Statistics::InternalSwap(AdjacentList_Statistics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edge_nums_of_vertex_chunks_.InternalSwap(&other->_impl_.edge_nums_of_vertex_chunks_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.num_vertex_chunks_)
      + sizeof(AdjacentList_Statistics::_impl_.num_vertex_chunks_)
      - PROTOBUF_FIELD_OFFSET(AdjacentList_Statistics, _impl_.num_vertices_)>(
          reinterpret_cast<char*>(&_impl_.num_vertices_),
          reinterpret_cast<char*>(&other->_impl_.num_vertices_));
}

::google::protobuf::Metadata AdjacentList_Statistics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AdjacentList::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AdjacentList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_._has_bits_);
};

AdjacentList::AdjacentList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:graphar.proto.AdjacentList)
}
inline PROTOBUF_NDEBUG_INLINE AdjacentList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::graphar::proto::AdjacentList& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        prefix_(arena, from.prefix_) {}

AdjacentList::AdjacentList(
    ::google::protobuf::Arena* arena,
    const AdjacentList& from)
    : ::google::protobuf::Message(arena) {
  AdjacentList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.statistics_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::graphar::proto::AdjacentList_Statistics>(
                              arena, *from._impl_.statistics_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, file_type_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::file_type_));

  // @@protoc_insertion_point(copy_constructor:graphar.proto.AdjacentList)
}
inline PROTOBUF_NDEBUG_INLINE AdjacentList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        prefix_(arena) {}

inline void AdjacentList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, statistics_),
           0,
           offsetof(Impl_, file_type_) -
               offsetof(Impl_, statistics_) +
               sizeof(Impl_::file_type_));
}
AdjacentList::~AdjacentList() {
  // @@protoc_insertion_point(destructor:graphar.proto.AdjacentList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AdjacentList::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.prefix_.Destroy();
  delete _impl_.statistics_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AdjacentList::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_._cached_size_),
              false,
          },
          &AdjacentList::MergeImpl,
          &AdjacentList::kDescriptorMethods,
          &descriptor_table_adjacent_5flist_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 41, 2> AdjacentList::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AdjacentList_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::graphar::proto::AdjacentList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .graphar.proto.AdjacentList.Statistics statistics = 4 [json_name = "statistics"];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.statistics_)}},
    // .graphar.proto.AdjListType type = 1 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AdjacentList, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.type_)}},
    // .graphar.proto.FileType file_type = 2 [json_name = "fileType"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AdjacentList, _impl_.file_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.file_type_)}},
    // string prefix = 3 [json_name = "prefix"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.prefix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .graphar.proto.AdjListType type = 1 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .graphar.proto.FileType file_type = 2 [json_name = "fileType"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.file_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string prefix = 3 [json_name = "prefix"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.prefix_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .graphar.proto.AdjacentList.Statistics statistics = 4 [json_name = "statistics"];
    {PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.statistics_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::graphar::proto::AdjacentList_Statistics>()},
  }}, {{
    "\32\0\0\6\0\0\0\0"
    "graphar.proto.AdjacentList"
    "prefix"
  }},
};

PROTOBUF_NOINLINE void AdjacentList::Clear() {
// @@protoc_insertion_point(message_clear_start:graphar.proto.AdjacentList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefix_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.statistics_ != nullptr);
    _impl_.statistics_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.file_type_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.file_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AdjacentList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graphar.proto.AdjacentList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .graphar.proto.AdjListType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // .graphar.proto.FileType file_type = 2 [json_name = "fileType"];
  if (this->_internal_file_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_file_type(), target);
  }

  // string prefix = 3 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    const std::string& _s = this->_internal_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.AdjacentList.prefix");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .graphar.proto.AdjacentList.Statistics statistics = 4 [json_name = "statistics"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.statistics_, _impl_.statistics_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graphar.proto.AdjacentList)
  return target;
}

::size_t AdjacentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphar.proto.AdjacentList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string prefix = 3 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_prefix());
  }

  // optional .graphar.proto.AdjacentList.Statistics statistics = 4 [json_name = "statistics"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.statistics_);
  }

  // .graphar.proto.AdjListType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .graphar.proto.FileType file_type = 2 [json_name = "fileType"];
  if (this->_internal_file_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_file_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AdjacentList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AdjacentList*>(&to_msg);
  auto& from = static_cast<const AdjacentList&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:graphar.proto.AdjacentList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.statistics_ != nullptr);
    if (_this->_impl_.statistics_ == nullptr) {
      _this->_impl_.statistics_ =
          ::google::protobuf::Message::CopyConstruct<::graphar::proto::AdjacentList_Statistics>(arena, *from._impl_.statistics_);
    } else {
      _this->_impl_.statistics_->MergeFrom(*from._impl_.statistics_);
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_file_type() != 0) {
    _this->_impl_.file_type_ = from._impl_.file_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AdjacentList::CopyFrom(const AdjacentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphar.proto.AdjacentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AdjacentList::InternalSwap(AdjacentList* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prefix_, &other->_impl_.prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.file_type_)
      + sizeof(AdjacentList::_impl_.file_type_)
      - PROTOBUF_FIELD_OFFSET(AdjacentList, _impl_.statistics_)>(
          reinterpret_cast<char*>(&_impl_.statistics_),
          reinterpret_cast<char*>(&other->_impl_.statistics_));
}

::google::protobuf::Metadata AdjacentList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace graphar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_adjacent_5flist_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
