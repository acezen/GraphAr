// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: property_group.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_property_5fgroup_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_property_5fgroup_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "enums.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_property_5fgroup_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_property_5fgroup_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_property_5fgroup_2eproto;
namespace graphar {
namespace proto {
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class PropertyGroup;
struct PropertyGroupDefaultTypeInternal;
extern PropertyGroupDefaultTypeInternal _PropertyGroup_default_instance_;
}  // namespace proto
}  // namespace graphar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace graphar {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class Property final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:graphar.proto.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Property(
      ::google::protobuf::internal::ConstantInitialized);

  inline Property(const Property& from) : Property(nullptr, from) {}
  inline Property(Property&& from) noexcept
      : Property(nullptr, std::move(from)) {}
  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
        &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Property& a, Property& b) { a.Swap(&b); }
  inline void Swap(Property* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Property>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Property& from) { Property::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Property* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "graphar.proto.Property"; }

 protected:
  explicit Property(::google::protobuf::Arena* arena);
  Property(::google::protobuf::Arena* arena, const Property& from);
  Property(::google::protobuf::Arena* arena, Property&& from) noexcept
      : Property(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPrefixFieldNumber = 5,
    kTypeFieldNumber = 2,
    kIsPrimaryKeyFieldNumber = 3,
    kIsNullableFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string prefix = 5 [json_name = "prefix"];
  void clear_prefix() ;
  const std::string& prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* value);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // .graphar.proto.DataType type = 2 [json_name = "type"];
  void clear_type() ;
  ::graphar::proto::DataType type() const;
  void set_type(::graphar::proto::DataType value);

  private:
  ::graphar::proto::DataType _internal_type() const;
  void _internal_set_type(::graphar::proto::DataType value);

  public:
  // bool is_primary_key = 3 [json_name = "isPrimaryKey"];
  void clear_is_primary_key() ;
  bool is_primary_key() const;
  void set_is_primary_key(bool value);

  private:
  bool _internal_is_primary_key() const;
  void _internal_set_is_primary_key(bool value);

  public:
  // bool is_nullable = 4 [json_name = "isNullable"];
  void clear_is_nullable() ;
  bool is_nullable() const;
  void set_is_nullable(bool value);

  private:
  bool _internal_is_nullable() const;
  void _internal_set_is_nullable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:graphar.proto.Property)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Property_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Property& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    int type_;
    bool is_primary_key_;
    bool is_nullable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_property_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class PropertyGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:graphar.proto.PropertyGroup) */ {
 public:
  inline PropertyGroup() : PropertyGroup(nullptr) {}
  ~PropertyGroup() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyGroup(const PropertyGroup& from) : PropertyGroup(nullptr, from) {}
  inline PropertyGroup(PropertyGroup&& from) noexcept
      : PropertyGroup(nullptr, std::move(from)) {}
  inline PropertyGroup& operator=(const PropertyGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyGroup& operator=(PropertyGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyGroup* internal_default_instance() {
    return reinterpret_cast<const PropertyGroup*>(
        &_PropertyGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PropertyGroup& a, PropertyGroup& b) { a.Swap(&b); }
  inline void Swap(PropertyGroup* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PropertyGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyGroup& from) { PropertyGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PropertyGroup* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "graphar.proto.PropertyGroup"; }

 protected:
  explicit PropertyGroup(::google::protobuf::Arena* arena);
  PropertyGroup(::google::protobuf::Arena* arena, const PropertyGroup& from);
  PropertyGroup(::google::protobuf::Arena* arena, PropertyGroup&& from) noexcept
      : PropertyGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPropertiesFieldNumber = 1,
    kPrefixFieldNumber = 3,
    kFileTypeFieldNumber = 2,
  };
  // repeated .graphar.proto.Property properties = 1 [json_name = "properties"];
  int properties_size() const;
  private:
  int _internal_properties_size() const;

  public:
  void clear_properties() ;
  ::graphar::proto::Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>* mutable_properties();

  private:
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>& _internal_properties() const;
  ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>* _internal_mutable_properties();
  public:
  const ::graphar::proto::Property& properties(int index) const;
  ::graphar::proto::Property* add_properties();
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>& properties() const;
  // string prefix = 3 [json_name = "prefix"];
  void clear_prefix() ;
  const std::string& prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* value);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // .graphar.proto.FileType file_type = 2 [json_name = "fileType"];
  void clear_file_type() ;
  ::graphar::proto::FileType file_type() const;
  void set_file_type(::graphar::proto::FileType value);

  private:
  ::graphar::proto::FileType _internal_file_type() const;
  void _internal_set_file_type(::graphar::proto::FileType value);

  public:
  // @@protoc_insertion_point(class_scope:graphar.proto.PropertyGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PropertyGroup_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyGroup& from_msg);
    ::google::protobuf::RepeatedPtrField< ::graphar::proto::Property > properties_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    int file_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_property_5fgroup_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Property

// string name = 1 [json_name = "name"];
inline void Property::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Property::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.Property.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.Property.name)
}
inline std::string* Property::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:graphar.proto.Property.name)
  return _s;
}
inline const std::string& Property::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Property::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Property::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.Property.name)
  return _impl_.name_.Release();
}
inline void Property::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.Property.name)
}

// .graphar.proto.DataType type = 2 [json_name = "type"];
inline void Property::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::graphar::proto::DataType Property::type() const {
  // @@protoc_insertion_point(field_get:graphar.proto.Property.type)
  return _internal_type();
}
inline void Property::set_type(::graphar::proto::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:graphar.proto.Property.type)
}
inline ::graphar::proto::DataType Property::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::graphar::proto::DataType>(_impl_.type_);
}
inline void Property::_internal_set_type(::graphar::proto::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// bool is_primary_key = 3 [json_name = "isPrimaryKey"];
inline void Property::clear_is_primary_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_primary_key_ = false;
}
inline bool Property::is_primary_key() const {
  // @@protoc_insertion_point(field_get:graphar.proto.Property.is_primary_key)
  return _internal_is_primary_key();
}
inline void Property::set_is_primary_key(bool value) {
  _internal_set_is_primary_key(value);
  // @@protoc_insertion_point(field_set:graphar.proto.Property.is_primary_key)
}
inline bool Property::_internal_is_primary_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_primary_key_;
}
inline void Property::_internal_set_is_primary_key(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_primary_key_ = value;
}

// bool is_nullable = 4 [json_name = "isNullable"];
inline void Property::clear_is_nullable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_nullable_ = false;
}
inline bool Property::is_nullable() const {
  // @@protoc_insertion_point(field_get:graphar.proto.Property.is_nullable)
  return _internal_is_nullable();
}
inline void Property::set_is_nullable(bool value) {
  _internal_set_is_nullable(value);
  // @@protoc_insertion_point(field_set:graphar.proto.Property.is_nullable)
}
inline bool Property::_internal_is_nullable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_nullable_;
}
inline void Property::_internal_set_is_nullable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_nullable_ = value;
}

// string prefix = 5 [json_name = "prefix"];
inline void Property::clear_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& Property::prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.Property.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.Property.prefix)
}
inline std::string* Property::mutable_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:graphar.proto.Property.prefix)
  return _s;
}
inline const std::string& Property::_internal_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prefix_.Get();
}
inline void Property::_internal_set_prefix(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prefix_.Mutable( GetArena());
}
inline std::string* Property::release_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.Property.prefix)
  return _impl_.prefix_.Release();
}
inline void Property::set_allocated_prefix(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefix_.IsDefault()) {
          _impl_.prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.Property.prefix)
}

// -------------------------------------------------------------------

// PropertyGroup

// repeated .graphar.proto.Property properties = 1 [json_name = "properties"];
inline int PropertyGroup::_internal_properties_size() const {
  return _internal_properties().size();
}
inline int PropertyGroup::properties_size() const {
  return _internal_properties_size();
}
inline void PropertyGroup::clear_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.Clear();
}
inline ::graphar::proto::Property* PropertyGroup::mutable_properties(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:graphar.proto.PropertyGroup.properties)
  return _internal_mutable_properties()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>* PropertyGroup::mutable_properties()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:graphar.proto.PropertyGroup.properties)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_properties();
}
inline const ::graphar::proto::Property& PropertyGroup::properties(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.PropertyGroup.properties)
  return _internal_properties().Get(index);
}
inline ::graphar::proto::Property* PropertyGroup::add_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::graphar::proto::Property* _add = _internal_mutable_properties()->Add();
  // @@protoc_insertion_point(field_add:graphar.proto.PropertyGroup.properties)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>& PropertyGroup::properties() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:graphar.proto.PropertyGroup.properties)
  return _internal_properties();
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>&
PropertyGroup::_internal_properties() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.properties_;
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::Property>*
PropertyGroup::_internal_mutable_properties() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.properties_;
}

// .graphar.proto.FileType file_type = 2 [json_name = "fileType"];
inline void PropertyGroup::clear_file_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_type_ = 0;
}
inline ::graphar::proto::FileType PropertyGroup::file_type() const {
  // @@protoc_insertion_point(field_get:graphar.proto.PropertyGroup.file_type)
  return _internal_file_type();
}
inline void PropertyGroup::set_file_type(::graphar::proto::FileType value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:graphar.proto.PropertyGroup.file_type)
}
inline ::graphar::proto::FileType PropertyGroup::_internal_file_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::graphar::proto::FileType>(_impl_.file_type_);
}
inline void PropertyGroup::_internal_set_file_type(::graphar::proto::FileType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_type_ = value;
}

// string prefix = 3 [json_name = "prefix"];
inline void PropertyGroup::clear_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& PropertyGroup::prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.PropertyGroup.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyGroup::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.PropertyGroup.prefix)
}
inline std::string* PropertyGroup::mutable_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:graphar.proto.PropertyGroup.prefix)
  return _s;
}
inline const std::string& PropertyGroup::_internal_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prefix_.Get();
}
inline void PropertyGroup::_internal_set_prefix(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.Set(value, GetArena());
}
inline std::string* PropertyGroup::_internal_mutable_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prefix_.Mutable( GetArena());
}
inline std::string* PropertyGroup::release_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.PropertyGroup.prefix)
  return _impl_.prefix_.Release();
}
inline void PropertyGroup::set_allocated_prefix(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefix_.IsDefault()) {
          _impl_.prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.PropertyGroup.prefix)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace graphar


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_property_5fgroup_2eproto_2epb_2eh
