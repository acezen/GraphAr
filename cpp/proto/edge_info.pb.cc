// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: edge_info.proto
// Protobuf C++ Version: 5.27.1

#include "edge_info.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace graphar {
namespace proto {

inline constexpr EdgeInfo_Statistics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : num_edges_{::int64_t{0}},
        num_source_vertices_{::int64_t{0}},
        num_destination_vertices_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EdgeInfo_Statistics::EdgeInfo_Statistics(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EdgeInfo_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeInfo_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeInfo_StatisticsDefaultTypeInternal() {}
  union {
    EdgeInfo_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeInfo_StatisticsDefaultTypeInternal _EdgeInfo_Statistics_default_instance_;

inline constexpr EdgeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        adjacent_list_{},
        properties_{},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_vertex_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        destination_vertex_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        statistics_{nullptr},
        chunk_size_{::int64_t{0}},
        source_vertex_chunk_size_{::int64_t{0}},
        destination_vertex_chunk_size_{::int64_t{0}},
        is_directed_{false} {}

template <typename>
PROTOBUF_CONSTEXPR EdgeInfo::EdgeInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EdgeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeInfoDefaultTypeInternal() {}
  union {
    EdgeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
}  // namespace proto
}  // namespace graphar
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_edge_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_edge_5finfo_2eproto = nullptr;
const ::uint32_t
    TableStruct_edge_5finfo_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo_Statistics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo_Statistics, _impl_.num_edges_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo_Statistics, _impl_.num_source_vertices_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo_Statistics, _impl_.num_destination_vertices_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.source_vertex_type_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.destination_vertex_type_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.chunk_size_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.source_vertex_chunk_size_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.destination_vertex_chunk_size_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.adjacent_list_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.properties_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.is_directed_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.prefix_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::EdgeInfo, _impl_.statistics_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::graphar::proto::EdgeInfo_Statistics)},
        {11, 30, -1, sizeof(::graphar::proto::EdgeInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::graphar::proto::_EdgeInfo_Statistics_default_instance_._instance,
    &::graphar::proto::_EdgeInfo_default_instance_._instance,
};
const char descriptor_table_protodef_edge_5finfo_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017edge_info.proto\022\rgraphar.proto\032\024proper"
    "ty_group.proto\032\023adjacent_list.proto\"\306\005\n\010"
    "EdgeInfo\022\022\n\004type\030\001 \001(\tR\004type\022,\n\022source_v"
    "ertex_type\030\002 \001(\tR\020sourceVertexType\0226\n\027de"
    "stination_vertex_type\030\003 \001(\tR\025destination"
    "VertexType\022\035\n\nchunk_size\030\004 \001(\003R\tchunkSiz"
    "e\0227\n\030source_vertex_chunk_size\030\005 \001(\003R\025sou"
    "rceVertexChunkSize\022A\n\035destination_vertex"
    "_chunk_size\030\006 \001(\003R\032destinationVertexChun"
    "kSize\022@\n\radjacent_list\030\007 \003(\0132\033.graphar.p"
    "roto.AdjacentListR\014adjacentList\022<\n\nprope"
    "rties\030\010 \003(\0132\034.graphar.proto.PropertyGrou"
    "pR\nproperties\022\037\n\013is_directed\030\t \001(\010R\nisDi"
    "rected\022\026\n\006prefix\030\n \001(\tR\006prefix\022G\n\nstatis"
    "tics\030\013 \001(\0132\".graphar.proto.EdgeInfo.Stat"
    "isticsH\000R\nstatistics\210\001\001\032\223\001\n\nStatistics\022\033"
    "\n\tnum_edges\030\001 \001(\003R\010numEdges\022.\n\023num_sourc"
    "e_vertices\030\002 \001(\003R\021numSourceVertices\0228\n\030n"
    "um_destination_vertices\030\003 \001(\003R\026numDestin"
    "ationVerticesB\r\n\013_statisticsB\203\001\n\035org.apa"
    "che.graphar.info.protoB\rEdgeInfoProtoP\001\242"
    "\002\003GPX\252\002\rGraphar.Proto\312\002\rGraphar\\Proto\342\002\031"
    "Graphar\\Proto\\GPBMetadata\352\002\016Graphar::Pro"
    "tob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_edge_5finfo_2eproto_deps[2] =
    {
        &::descriptor_table_adjacent_5flist_2eproto,
        &::descriptor_table_property_5fgroup_2eproto,
};
static ::absl::once_flag descriptor_table_edge_5finfo_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_edge_5finfo_2eproto = {
    false,
    false,
    930,
    descriptor_table_protodef_edge_5finfo_2eproto,
    "edge_info.proto",
    &descriptor_table_edge_5finfo_2eproto_once,
    descriptor_table_edge_5finfo_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_edge_5finfo_2eproto::offsets,
    file_level_enum_descriptors_edge_5finfo_2eproto,
    file_level_service_descriptors_edge_5finfo_2eproto,
};
namespace graphar {
namespace proto {
// ===================================================================

class EdgeInfo_Statistics::_Internal {
 public:
};

EdgeInfo_Statistics::EdgeInfo_Statistics(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:graphar.proto.EdgeInfo.Statistics)
}
EdgeInfo_Statistics::EdgeInfo_Statistics(
    ::google::protobuf::Arena* arena, const EdgeInfo_Statistics& from)
    : EdgeInfo_Statistics(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EdgeInfo_Statistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EdgeInfo_Statistics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_edges_),
           0,
           offsetof(Impl_, num_destination_vertices_) -
               offsetof(Impl_, num_edges_) +
               sizeof(Impl_::num_destination_vertices_));
}
EdgeInfo_Statistics::~EdgeInfo_Statistics() {
  // @@protoc_insertion_point(destructor:graphar.proto.EdgeInfo.Statistics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EdgeInfo_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
EdgeInfo_Statistics::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_._cached_size_),
              false,
          },
          &EdgeInfo_Statistics::MergeImpl,
          &EdgeInfo_Statistics::kDescriptorMethods,
          &descriptor_table_edge_5finfo_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> EdgeInfo_Statistics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EdgeInfo_Statistics_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::graphar::proto::EdgeInfo_Statistics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 num_edges = 1 [json_name = "numEdges"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeInfo_Statistics, _impl_.num_edges_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_edges_)}},
    // int64 num_source_vertices = 2 [json_name = "numSourceVertices"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeInfo_Statistics, _impl_.num_source_vertices_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_source_vertices_)}},
    // int64 num_destination_vertices = 3 [json_name = "numDestinationVertices"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeInfo_Statistics, _impl_.num_destination_vertices_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_destination_vertices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 num_edges = 1 [json_name = "numEdges"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_edges_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 num_source_vertices = 2 [json_name = "numSourceVertices"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_source_vertices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 num_destination_vertices = 3 [json_name = "numDestinationVertices"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_destination_vertices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void EdgeInfo_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:graphar.proto.EdgeInfo.Statistics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_edges_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_destination_vertices_) -
      reinterpret_cast<char*>(&_impl_.num_edges_)) + sizeof(_impl_.num_destination_vertices_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* EdgeInfo_Statistics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graphar.proto.EdgeInfo.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 num_edges = 1 [json_name = "numEdges"];
  if (this->_internal_num_edges() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_num_edges(), target);
  }

  // int64 num_source_vertices = 2 [json_name = "numSourceVertices"];
  if (this->_internal_num_source_vertices() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_num_source_vertices(), target);
  }

  // int64 num_destination_vertices = 3 [json_name = "numDestinationVertices"];
  if (this->_internal_num_destination_vertices() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_num_destination_vertices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graphar.proto.EdgeInfo.Statistics)
  return target;
}

::size_t EdgeInfo_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphar.proto.EdgeInfo.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int64 num_edges = 1 [json_name = "numEdges"];
  if (this->_internal_num_edges() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_edges());
  }

  // int64 num_source_vertices = 2 [json_name = "numSourceVertices"];
  if (this->_internal_num_source_vertices() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_source_vertices());
  }

  // int64 num_destination_vertices = 3 [json_name = "numDestinationVertices"];
  if (this->_internal_num_destination_vertices() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_destination_vertices());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void EdgeInfo_Statistics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EdgeInfo_Statistics*>(&to_msg);
  auto& from = static_cast<const EdgeInfo_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graphar.proto.EdgeInfo.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_edges() != 0) {
    _this->_impl_.num_edges_ = from._impl_.num_edges_;
  }
  if (from._internal_num_source_vertices() != 0) {
    _this->_impl_.num_source_vertices_ = from._impl_.num_source_vertices_;
  }
  if (from._internal_num_destination_vertices() != 0) {
    _this->_impl_.num_destination_vertices_ = from._impl_.num_destination_vertices_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeInfo_Statistics::CopyFrom(const EdgeInfo_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphar.proto.EdgeInfo.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EdgeInfo_Statistics::InternalSwap(EdgeInfo_Statistics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_destination_vertices_)
      + sizeof(EdgeInfo_Statistics::_impl_.num_destination_vertices_)
      - PROTOBUF_FIELD_OFFSET(EdgeInfo_Statistics, _impl_.num_edges_)>(
          reinterpret_cast<char*>(&_impl_.num_edges_),
          reinterpret_cast<char*>(&other->_impl_.num_edges_));
}

::google::protobuf::Metadata EdgeInfo_Statistics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EdgeInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EdgeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_._has_bits_);
};

void EdgeInfo::clear_adjacent_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adjacent_list_.Clear();
}
void EdgeInfo::clear_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.Clear();
}
EdgeInfo::EdgeInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:graphar.proto.EdgeInfo)
}
inline PROTOBUF_NDEBUG_INLINE EdgeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::graphar::proto::EdgeInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        adjacent_list_{visibility, arena, from.adjacent_list_},
        properties_{visibility, arena, from.properties_},
        type_(arena, from.type_),
        source_vertex_type_(arena, from.source_vertex_type_),
        destination_vertex_type_(arena, from.destination_vertex_type_),
        prefix_(arena, from.prefix_) {}

EdgeInfo::EdgeInfo(
    ::google::protobuf::Arena* arena,
    const EdgeInfo& from)
    : ::google::protobuf::Message(arena) {
  EdgeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.statistics_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::graphar::proto::EdgeInfo_Statistics>(
                              arena, *from._impl_.statistics_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chunk_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, chunk_size_),
           offsetof(Impl_, is_directed_) -
               offsetof(Impl_, chunk_size_) +
               sizeof(Impl_::is_directed_));

  // @@protoc_insertion_point(copy_constructor:graphar.proto.EdgeInfo)
}
inline PROTOBUF_NDEBUG_INLINE EdgeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        adjacent_list_{visibility, arena},
        properties_{visibility, arena},
        type_(arena),
        source_vertex_type_(arena),
        destination_vertex_type_(arena),
        prefix_(arena) {}

inline void EdgeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, statistics_),
           0,
           offsetof(Impl_, is_directed_) -
               offsetof(Impl_, statistics_) +
               sizeof(Impl_::is_directed_));
}
EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:graphar.proto.EdgeInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EdgeInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.type_.Destroy();
  _impl_.source_vertex_type_.Destroy();
  _impl_.destination_vertex_type_.Destroy();
  _impl_.prefix_.Destroy();
  delete _impl_.statistics_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
EdgeInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_._cached_size_),
              false,
          },
          &EdgeInfo::MergeImpl,
          &EdgeInfo::kDescriptorMethods,
          &descriptor_table_edge_5finfo_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 3, 90, 2> EdgeInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EdgeInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::graphar::proto::EdgeInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string type = 1 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.type_)}},
    // string source_vertex_type = 2 [json_name = "sourceVertexType"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.source_vertex_type_)}},
    // string destination_vertex_type = 3 [json_name = "destinationVertexType"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.destination_vertex_type_)}},
    // int64 chunk_size = 4 [json_name = "chunkSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeInfo, _impl_.chunk_size_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.chunk_size_)}},
    // int64 source_vertex_chunk_size = 5 [json_name = "sourceVertexChunkSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeInfo, _impl_.source_vertex_chunk_size_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.source_vertex_chunk_size_)}},
    // int64 destination_vertex_chunk_size = 6 [json_name = "destinationVertexChunkSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EdgeInfo, _impl_.destination_vertex_chunk_size_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.destination_vertex_chunk_size_)}},
    // repeated .graphar.proto.AdjacentList adjacent_list = 7 [json_name = "adjacentList"];
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.adjacent_list_)}},
    // repeated .graphar.proto.PropertyGroup properties = 8 [json_name = "properties"];
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 1, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.properties_)}},
    // bool is_directed = 9 [json_name = "isDirected"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EdgeInfo, _impl_.is_directed_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.is_directed_)}},
    // string prefix = 10 [json_name = "prefix"];
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.prefix_)}},
    // optional .graphar.proto.EdgeInfo.Statistics statistics = 11 [json_name = "statistics"];
    {::_pbi::TcParser::FastMtS1,
     {90, 0, 2, PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.statistics_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string source_vertex_type = 2 [json_name = "sourceVertexType"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.source_vertex_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string destination_vertex_type = 3 [json_name = "destinationVertexType"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.destination_vertex_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 chunk_size = 4 [json_name = "chunkSize"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.chunk_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 source_vertex_chunk_size = 5 [json_name = "sourceVertexChunkSize"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.source_vertex_chunk_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 destination_vertex_chunk_size = 6 [json_name = "destinationVertexChunkSize"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.destination_vertex_chunk_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .graphar.proto.AdjacentList adjacent_list = 7 [json_name = "adjacentList"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.adjacent_list_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .graphar.proto.PropertyGroup properties = 8 [json_name = "properties"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.properties_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_directed = 9 [json_name = "isDirected"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.is_directed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string prefix = 10 [json_name = "prefix"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.prefix_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .graphar.proto.EdgeInfo.Statistics statistics = 11 [json_name = "statistics"];
    {PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.statistics_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::graphar::proto::AdjacentList>()},
    {::_pbi::TcParser::GetTable<::graphar::proto::PropertyGroup>()},
    {::_pbi::TcParser::GetTable<::graphar::proto::EdgeInfo_Statistics>()},
  }}, {{
    "\26\4\22\27\0\0\0\0\0\0\6\0\0\0\0\0"
    "graphar.proto.EdgeInfo"
    "type"
    "source_vertex_type"
    "destination_vertex_type"
    "prefix"
  }},
};

PROTOBUF_NOINLINE void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:graphar.proto.EdgeInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.adjacent_list_.Clear();
  _impl_.properties_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.source_vertex_type_.ClearToEmpty();
  _impl_.destination_vertex_type_.ClearToEmpty();
  _impl_.prefix_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.statistics_ != nullptr);
    _impl_.statistics_->Clear();
  }
  ::memset(&_impl_.chunk_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_directed_) -
      reinterpret_cast<char*>(&_impl_.chunk_size_)) + sizeof(_impl_.is_directed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* EdgeInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graphar.proto.EdgeInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.EdgeInfo.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string source_vertex_type = 2 [json_name = "sourceVertexType"];
  if (!this->_internal_source_vertex_type().empty()) {
    const std::string& _s = this->_internal_source_vertex_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.EdgeInfo.source_vertex_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string destination_vertex_type = 3 [json_name = "destinationVertexType"];
  if (!this->_internal_destination_vertex_type().empty()) {
    const std::string& _s = this->_internal_destination_vertex_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.EdgeInfo.destination_vertex_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int64 chunk_size = 4 [json_name = "chunkSize"];
  if (this->_internal_chunk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_chunk_size(), target);
  }

  // int64 source_vertex_chunk_size = 5 [json_name = "sourceVertexChunkSize"];
  if (this->_internal_source_vertex_chunk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_source_vertex_chunk_size(), target);
  }

  // int64 destination_vertex_chunk_size = 6 [json_name = "destinationVertexChunkSize"];
  if (this->_internal_destination_vertex_chunk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_destination_vertex_chunk_size(), target);
  }

  // repeated .graphar.proto.AdjacentList adjacent_list = 7 [json_name = "adjacentList"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_adjacent_list_size());
       i < n; i++) {
    const auto& repfield = this->_internal_adjacent_list().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .graphar.proto.PropertyGroup properties = 8 [json_name = "properties"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_properties_size());
       i < n; i++) {
    const auto& repfield = this->_internal_properties().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bool is_directed = 9 [json_name = "isDirected"];
  if (this->_internal_is_directed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_is_directed(), target);
  }

  // string prefix = 10 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    const std::string& _s = this->_internal_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.EdgeInfo.prefix");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .graphar.proto.EdgeInfo.Statistics statistics = 11 [json_name = "statistics"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *_impl_.statistics_, _impl_.statistics_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graphar.proto.EdgeInfo)
  return target;
}

::size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphar.proto.EdgeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .graphar.proto.AdjacentList adjacent_list = 7 [json_name = "adjacentList"];
  total_size += 1UL * this->_internal_adjacent_list_size();
  for (const auto& msg : this->_internal_adjacent_list()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .graphar.proto.PropertyGroup properties = 8 [json_name = "properties"];
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_internal_properties()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string source_vertex_type = 2 [json_name = "sourceVertexType"];
  if (!this->_internal_source_vertex_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source_vertex_type());
  }

  // string destination_vertex_type = 3 [json_name = "destinationVertexType"];
  if (!this->_internal_destination_vertex_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_vertex_type());
  }

  // string prefix = 10 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_prefix());
  }

  // optional .graphar.proto.EdgeInfo.Statistics statistics = 11 [json_name = "statistics"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.statistics_);
  }

  // int64 chunk_size = 4 [json_name = "chunkSize"];
  if (this->_internal_chunk_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_chunk_size());
  }

  // int64 source_vertex_chunk_size = 5 [json_name = "sourceVertexChunkSize"];
  if (this->_internal_source_vertex_chunk_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_source_vertex_chunk_size());
  }

  // int64 destination_vertex_chunk_size = 6 [json_name = "destinationVertexChunkSize"];
  if (this->_internal_destination_vertex_chunk_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_destination_vertex_chunk_size());
  }

  // bool is_directed = 9 [json_name = "isDirected"];
  if (this->_internal_is_directed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void EdgeInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EdgeInfo*>(&to_msg);
  auto& from = static_cast<const EdgeInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:graphar.proto.EdgeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_adjacent_list()->MergeFrom(
      from._internal_adjacent_list());
  _this->_internal_mutable_properties()->MergeFrom(
      from._internal_properties());
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_source_vertex_type().empty()) {
    _this->_internal_set_source_vertex_type(from._internal_source_vertex_type());
  }
  if (!from._internal_destination_vertex_type().empty()) {
    _this->_internal_set_destination_vertex_type(from._internal_destination_vertex_type());
  }
  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.statistics_ != nullptr);
    if (_this->_impl_.statistics_ == nullptr) {
      _this->_impl_.statistics_ =
          ::google::protobuf::Message::CopyConstruct<::graphar::proto::EdgeInfo_Statistics>(arena, *from._impl_.statistics_);
    } else {
      _this->_impl_.statistics_->MergeFrom(*from._impl_.statistics_);
    }
  }
  if (from._internal_chunk_size() != 0) {
    _this->_impl_.chunk_size_ = from._impl_.chunk_size_;
  }
  if (from._internal_source_vertex_chunk_size() != 0) {
    _this->_impl_.source_vertex_chunk_size_ = from._impl_.source_vertex_chunk_size_;
  }
  if (from._internal_destination_vertex_chunk_size() != 0) {
    _this->_impl_.destination_vertex_chunk_size_ = from._impl_.destination_vertex_chunk_size_;
  }
  if (from._internal_is_directed() != 0) {
    _this->_impl_.is_directed_ = from._impl_.is_directed_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphar.proto.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EdgeInfo::InternalSwap(EdgeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.adjacent_list_.InternalSwap(&other->_impl_.adjacent_list_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_vertex_type_, &other->_impl_.source_vertex_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_vertex_type_, &other->_impl_.destination_vertex_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prefix_, &other->_impl_.prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.is_directed_)
      + sizeof(EdgeInfo::_impl_.is_directed_)
      - PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.statistics_)>(
          reinterpret_cast<char*>(&_impl_.statistics_),
          reinterpret_cast<char*>(&other->_impl_.statistics_));
}

::google::protobuf::Metadata EdgeInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace graphar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_edge_5finfo_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
