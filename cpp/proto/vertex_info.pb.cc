// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vertex_info.proto
// Protobuf C++ Version: 5.27.1

#include "vertex_info.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace graphar {
namespace proto {

inline constexpr VertexInfo_Statistics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : num_vertices_{::int64_t{0}},
        num_chunks_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VertexInfo_Statistics::VertexInfo_Statistics(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VertexInfo_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexInfo_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexInfo_StatisticsDefaultTypeInternal() {}
  union {
    VertexInfo_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexInfo_StatisticsDefaultTypeInternal _VertexInfo_Statistics_default_instance_;

inline constexpr VertexInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        properties_{},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        statistics_{nullptr},
        chunk_size_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR VertexInfo::VertexInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VertexInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexInfoDefaultTypeInternal() {}
  union {
    VertexInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
}  // namespace proto
}  // namespace graphar
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_vertex_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_vertex_5finfo_2eproto = nullptr;
const ::uint32_t
    TableStruct_vertex_5finfo_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo_Statistics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo_Statistics, _impl_.num_vertices_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo_Statistics, _impl_.num_chunks_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _impl_.chunk_size_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _impl_.properties_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _impl_.prefix_),
        PROTOBUF_FIELD_OFFSET(::graphar::proto::VertexInfo, _impl_.statistics_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::graphar::proto::VertexInfo_Statistics)},
        {10, 23, -1, sizeof(::graphar::proto::VertexInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::graphar::proto::_VertexInfo_Statistics_default_instance_._instance,
    &::graphar::proto::_VertexInfo_default_instance_._instance,
};
const char descriptor_table_protodef_vertex_5finfo_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021vertex_info.proto\022\rgraphar.proto\032\024prop"
    "erty_group.proto\"\277\002\n\nVertexInfo\022\022\n\004type\030"
    "\001 \001(\tR\004type\022\035\n\nchunk_size\030\002 \001(\003R\tchunkSi"
    "ze\022<\n\nproperties\030\003 \003(\0132\034.graphar.proto.P"
    "ropertyGroupR\nproperties\022\026\n\006prefix\030\004 \001(\t"
    "R\006prefix\022I\n\nstatistics\030\005 \001(\0132$.graphar.p"
    "roto.VertexInfo.StatisticsH\000R\nstatistics"
    "\210\001\001\032N\n\nStatistics\022!\n\014num_vertices\030\001 \001(\003R"
    "\013numVertices\022\035\n\nnum_chunks\030\002 \001(\003R\tnumChu"
    "nksB\r\n\013_statisticsB\205\001\n\035org.apache.grapha"
    "r.info.protoB\017VertexInfoProtoP\001\242\002\003GPX\252\002\r"
    "Graphar.Proto\312\002\rGraphar\\Proto\342\002\031Graphar\\"
    "Proto\\GPBMetadata\352\002\016Graphar::Protob\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_vertex_5finfo_2eproto_deps[1] =
    {
        &::descriptor_table_property_5fgroup_2eproto,
};
static ::absl::once_flag descriptor_table_vertex_5finfo_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_vertex_5finfo_2eproto = {
    false,
    false,
    522,
    descriptor_table_protodef_vertex_5finfo_2eproto,
    "vertex_info.proto",
    &descriptor_table_vertex_5finfo_2eproto_once,
    descriptor_table_vertex_5finfo_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_vertex_5finfo_2eproto::offsets,
    file_level_enum_descriptors_vertex_5finfo_2eproto,
    file_level_service_descriptors_vertex_5finfo_2eproto,
};
namespace graphar {
namespace proto {
// ===================================================================

class VertexInfo_Statistics::_Internal {
 public:
};

VertexInfo_Statistics::VertexInfo_Statistics(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:graphar.proto.VertexInfo.Statistics)
}
VertexInfo_Statistics::VertexInfo_Statistics(
    ::google::protobuf::Arena* arena, const VertexInfo_Statistics& from)
    : VertexInfo_Statistics(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VertexInfo_Statistics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VertexInfo_Statistics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_vertices_),
           0,
           offsetof(Impl_, num_chunks_) -
               offsetof(Impl_, num_vertices_) +
               sizeof(Impl_::num_chunks_));
}
VertexInfo_Statistics::~VertexInfo_Statistics() {
  // @@protoc_insertion_point(destructor:graphar.proto.VertexInfo.Statistics)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VertexInfo_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VertexInfo_Statistics::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_._cached_size_),
              false,
          },
          &VertexInfo_Statistics::MergeImpl,
          &VertexInfo_Statistics::kDescriptorMethods,
          &descriptor_table_vertex_5finfo_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> VertexInfo_Statistics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VertexInfo_Statistics_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::graphar::proto::VertexInfo_Statistics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 num_chunks = 2 [json_name = "numChunks"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(VertexInfo_Statistics, _impl_.num_chunks_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_.num_chunks_)}},
    // int64 num_vertices = 1 [json_name = "numVertices"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(VertexInfo_Statistics, _impl_.num_vertices_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_.num_vertices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 num_vertices = 1 [json_name = "numVertices"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_.num_vertices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 num_chunks = 2 [json_name = "numChunks"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_.num_chunks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VertexInfo_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:graphar.proto.VertexInfo.Statistics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_vertices_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_chunks_) -
      reinterpret_cast<char*>(&_impl_.num_vertices_)) + sizeof(_impl_.num_chunks_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VertexInfo_Statistics::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graphar.proto.VertexInfo.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 num_vertices = 1 [json_name = "numVertices"];
  if (this->_internal_num_vertices() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_num_vertices(), target);
  }

  // int64 num_chunks = 2 [json_name = "numChunks"];
  if (this->_internal_num_chunks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_num_chunks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graphar.proto.VertexInfo.Statistics)
  return target;
}

::size_t VertexInfo_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphar.proto.VertexInfo.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int64 num_vertices = 1 [json_name = "numVertices"];
  if (this->_internal_num_vertices() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_vertices());
  }

  // int64 num_chunks = 2 [json_name = "numChunks"];
  if (this->_internal_num_chunks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VertexInfo_Statistics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VertexInfo_Statistics*>(&to_msg);
  auto& from = static_cast<const VertexInfo_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:graphar.proto.VertexInfo.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_vertices() != 0) {
    _this->_impl_.num_vertices_ = from._impl_.num_vertices_;
  }
  if (from._internal_num_chunks() != 0) {
    _this->_impl_.num_chunks_ = from._impl_.num_chunks_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VertexInfo_Statistics::CopyFrom(const VertexInfo_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphar.proto.VertexInfo.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VertexInfo_Statistics::InternalSwap(VertexInfo_Statistics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_.num_chunks_)
      + sizeof(VertexInfo_Statistics::_impl_.num_chunks_)
      - PROTOBUF_FIELD_OFFSET(VertexInfo_Statistics, _impl_.num_vertices_)>(
          reinterpret_cast<char*>(&_impl_.num_vertices_),
          reinterpret_cast<char*>(&other->_impl_.num_vertices_));
}

::google::protobuf::Metadata VertexInfo_Statistics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VertexInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VertexInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_._has_bits_);
};

void VertexInfo::clear_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.Clear();
}
VertexInfo::VertexInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:graphar.proto.VertexInfo)
}
inline PROTOBUF_NDEBUG_INLINE VertexInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::graphar::proto::VertexInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        properties_{visibility, arena, from.properties_},
        type_(arena, from.type_),
        prefix_(arena, from.prefix_) {}

VertexInfo::VertexInfo(
    ::google::protobuf::Arena* arena,
    const VertexInfo& from)
    : ::google::protobuf::Message(arena) {
  VertexInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.statistics_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::graphar::proto::VertexInfo_Statistics>(
                              arena, *from._impl_.statistics_)
                        : nullptr;
  _impl_.chunk_size_ = from._impl_.chunk_size_;

  // @@protoc_insertion_point(copy_constructor:graphar.proto.VertexInfo)
}
inline PROTOBUF_NDEBUG_INLINE VertexInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        properties_{visibility, arena},
        type_(arena),
        prefix_(arena) {}

inline void VertexInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, statistics_),
           0,
           offsetof(Impl_, chunk_size_) -
               offsetof(Impl_, statistics_) +
               sizeof(Impl_::chunk_size_));
}
VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:graphar.proto.VertexInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VertexInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.type_.Destroy();
  _impl_.prefix_.Destroy();
  delete _impl_.statistics_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VertexInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_._cached_size_),
              false,
          },
          &VertexInfo::MergeImpl,
          &VertexInfo::kDescriptorMethods,
          &descriptor_table_vertex_5finfo_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 43, 2> VertexInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VertexInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::graphar::proto::VertexInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string type = 1 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.type_)}},
    // int64 chunk_size = 2 [json_name = "chunkSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(VertexInfo, _impl_.chunk_size_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.chunk_size_)}},
    // repeated .graphar.proto.PropertyGroup properties = 3 [json_name = "properties"];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.properties_)}},
    // string prefix = 4 [json_name = "prefix"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.prefix_)}},
    // optional .graphar.proto.VertexInfo.Statistics statistics = 5 [json_name = "statistics"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 1, PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.statistics_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 chunk_size = 2 [json_name = "chunkSize"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.chunk_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .graphar.proto.PropertyGroup properties = 3 [json_name = "properties"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.properties_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string prefix = 4 [json_name = "prefix"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.prefix_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .graphar.proto.VertexInfo.Statistics statistics = 5 [json_name = "statistics"];
    {PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.statistics_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::graphar::proto::PropertyGroup>()},
    {::_pbi::TcParser::GetTable<::graphar::proto::VertexInfo_Statistics>()},
  }}, {{
    "\30\4\0\0\6\0\0\0"
    "graphar.proto.VertexInfo"
    "type"
    "prefix"
  }},
};

PROTOBUF_NOINLINE void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:graphar.proto.VertexInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.prefix_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.statistics_ != nullptr);
    _impl_.statistics_->Clear();
  }
  _impl_.chunk_size_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* VertexInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graphar.proto.VertexInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.VertexInfo.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 chunk_size = 2 [json_name = "chunkSize"];
  if (this->_internal_chunk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_chunk_size(), target);
  }

  // repeated .graphar.proto.PropertyGroup properties = 3 [json_name = "properties"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_properties_size());
       i < n; i++) {
    const auto& repfield = this->_internal_properties().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string prefix = 4 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    const std::string& _s = this->_internal_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "graphar.proto.VertexInfo.prefix");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .graphar.proto.VertexInfo.Statistics statistics = 5 [json_name = "statistics"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.statistics_, _impl_.statistics_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graphar.proto.VertexInfo)
  return target;
}

::size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphar.proto.VertexInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .graphar.proto.PropertyGroup properties = 3 [json_name = "properties"];
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_internal_properties()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string prefix = 4 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_prefix());
  }

  // optional .graphar.proto.VertexInfo.Statistics statistics = 5 [json_name = "statistics"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.statistics_);
  }

  // int64 chunk_size = 2 [json_name = "chunkSize"];
  if (this->_internal_chunk_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_chunk_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VertexInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VertexInfo*>(&to_msg);
  auto& from = static_cast<const VertexInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:graphar.proto.VertexInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_properties()->MergeFrom(
      from._internal_properties());
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.statistics_ != nullptr);
    if (_this->_impl_.statistics_ == nullptr) {
      _this->_impl_.statistics_ =
          ::google::protobuf::Message::CopyConstruct<::graphar::proto::VertexInfo_Statistics>(arena, *from._impl_.statistics_);
    } else {
      _this->_impl_.statistics_->MergeFrom(*from._impl_.statistics_);
    }
  }
  if (from._internal_chunk_size() != 0) {
    _this->_impl_.chunk_size_ = from._impl_.chunk_size_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphar.proto.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VertexInfo::InternalSwap(VertexInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prefix_, &other->_impl_.prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.chunk_size_)
      + sizeof(VertexInfo::_impl_.chunk_size_)
      - PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.statistics_)>(
          reinterpret_cast<char*>(&_impl_.statistics_),
          reinterpret_cast<char*>(&other->_impl_.statistics_));
}

::google::protobuf::Metadata VertexInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace graphar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_vertex_5finfo_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
