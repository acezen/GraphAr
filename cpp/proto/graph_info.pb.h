// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: graph_info.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_5finfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_graph_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "vertex_info.pb.h"
#include "edge_info.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_graph_5finfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_graph_5finfo_2eproto;
namespace graphar {
namespace proto {
class GraphInfo;
struct GraphInfoDefaultTypeInternal;
extern GraphInfoDefaultTypeInternal _GraphInfo_default_instance_;
class GraphInfo_KeyValue;
struct GraphInfo_KeyValueDefaultTypeInternal;
extern GraphInfo_KeyValueDefaultTypeInternal _GraphInfo_KeyValue_default_instance_;
class GraphInfo_Statistics;
struct GraphInfo_StatisticsDefaultTypeInternal;
extern GraphInfo_StatisticsDefaultTypeInternal _GraphInfo_Statistics_default_instance_;
}  // namespace proto
}  // namespace graphar
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace graphar {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class GraphInfo_Statistics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:graphar.proto.GraphInfo.Statistics) */ {
 public:
  inline GraphInfo_Statistics() : GraphInfo_Statistics(nullptr) {}
  ~GraphInfo_Statistics() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphInfo_Statistics(
      ::google::protobuf::internal::ConstantInitialized);

  inline GraphInfo_Statistics(const GraphInfo_Statistics& from) : GraphInfo_Statistics(nullptr, from) {}
  inline GraphInfo_Statistics(GraphInfo_Statistics&& from) noexcept
      : GraphInfo_Statistics(nullptr, std::move(from)) {}
  inline GraphInfo_Statistics& operator=(const GraphInfo_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphInfo_Statistics& operator=(GraphInfo_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphInfo_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphInfo_Statistics* internal_default_instance() {
    return reinterpret_cast<const GraphInfo_Statistics*>(
        &_GraphInfo_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GraphInfo_Statistics& a, GraphInfo_Statistics& b) { a.Swap(&b); }
  inline void Swap(GraphInfo_Statistics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphInfo_Statistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphInfo_Statistics* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GraphInfo_Statistics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GraphInfo_Statistics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GraphInfo_Statistics& from) { GraphInfo_Statistics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GraphInfo_Statistics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "graphar.proto.GraphInfo.Statistics"; }

 protected:
  explicit GraphInfo_Statistics(::google::protobuf::Arena* arena);
  GraphInfo_Statistics(::google::protobuf::Arena* arena, const GraphInfo_Statistics& from);
  GraphInfo_Statistics(::google::protobuf::Arena* arena, GraphInfo_Statistics&& from) noexcept
      : GraphInfo_Statistics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumVerticesFieldNumber = 1,
    kNumEdgesFieldNumber = 2,
  };
  // int64 num_vertices = 1 [json_name = "numVertices"];
  void clear_num_vertices() ;
  ::int64_t num_vertices() const;
  void set_num_vertices(::int64_t value);

  private:
  ::int64_t _internal_num_vertices() const;
  void _internal_set_num_vertices(::int64_t value);

  public:
  // int64 num_edges = 2 [json_name = "numEdges"];
  void clear_num_edges() ;
  ::int64_t num_edges() const;
  void set_num_edges(::int64_t value);

  private:
  ::int64_t _internal_num_edges() const;
  void _internal_set_num_edges(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:graphar.proto.GraphInfo.Statistics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GraphInfo_Statistics_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GraphInfo_Statistics& from_msg);
    ::int64_t num_vertices_;
    ::int64_t num_edges_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5finfo_2eproto;
};
// -------------------------------------------------------------------

class GraphInfo_KeyValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:graphar.proto.GraphInfo.KeyValue) */ {
 public:
  inline GraphInfo_KeyValue() : GraphInfo_KeyValue(nullptr) {}
  ~GraphInfo_KeyValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphInfo_KeyValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline GraphInfo_KeyValue(const GraphInfo_KeyValue& from) : GraphInfo_KeyValue(nullptr, from) {}
  inline GraphInfo_KeyValue(GraphInfo_KeyValue&& from) noexcept
      : GraphInfo_KeyValue(nullptr, std::move(from)) {}
  inline GraphInfo_KeyValue& operator=(const GraphInfo_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphInfo_KeyValue& operator=(GraphInfo_KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphInfo_KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphInfo_KeyValue* internal_default_instance() {
    return reinterpret_cast<const GraphInfo_KeyValue*>(
        &_GraphInfo_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GraphInfo_KeyValue& a, GraphInfo_KeyValue& b) { a.Swap(&b); }
  inline void Swap(GraphInfo_KeyValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphInfo_KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphInfo_KeyValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GraphInfo_KeyValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GraphInfo_KeyValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GraphInfo_KeyValue& from) { GraphInfo_KeyValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GraphInfo_KeyValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "graphar.proto.GraphInfo.KeyValue"; }

 protected:
  explicit GraphInfo_KeyValue(::google::protobuf::Arena* arena);
  GraphInfo_KeyValue(::google::protobuf::Arena* arena, const GraphInfo_KeyValue& from);
  GraphInfo_KeyValue(::google::protobuf::Arena* arena, GraphInfo_KeyValue&& from) noexcept
      : GraphInfo_KeyValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:graphar.proto.GraphInfo.KeyValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GraphInfo_KeyValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GraphInfo_KeyValue& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5finfo_2eproto;
};
// -------------------------------------------------------------------

class GraphInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:graphar.proto.GraphInfo) */ {
 public:
  inline GraphInfo() : GraphInfo(nullptr) {}
  ~GraphInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GraphInfo(const GraphInfo& from) : GraphInfo(nullptr, from) {}
  inline GraphInfo(GraphInfo&& from) noexcept
      : GraphInfo(nullptr, std::move(from)) {}
  inline GraphInfo& operator=(const GraphInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphInfo& operator=(GraphInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphInfo* internal_default_instance() {
    return reinterpret_cast<const GraphInfo*>(
        &_GraphInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GraphInfo& a, GraphInfo& b) { a.Swap(&b); }
  inline void Swap(GraphInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GraphInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GraphInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GraphInfo& from) { GraphInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GraphInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "graphar.proto.GraphInfo"; }

 protected:
  explicit GraphInfo(::google::protobuf::Arena* arena);
  GraphInfo(::google::protobuf::Arena* arena, const GraphInfo& from);
  GraphInfo(::google::protobuf::Arena* arena, GraphInfo&& from) noexcept
      : GraphInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Statistics = GraphInfo_Statistics;
  using KeyValue = GraphInfo_KeyValue;

  // accessors -------------------------------------------------------
  enum : int {
    kVerticesFieldNumber = 2,
    kEdgesFieldNumber = 3,
    kKeyValueMetadataFieldNumber = 6,
    kNameFieldNumber = 1,
    kPrefixFieldNumber = 4,
    kStatisticsFieldNumber = 5,
  };
  // repeated .graphar.proto.VertexInfo vertices = 2 [json_name = "vertices"];
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  ::graphar::proto::VertexInfo* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>* mutable_vertices();

  private:
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>& _internal_vertices() const;
  ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>* _internal_mutable_vertices();
  public:
  const ::graphar::proto::VertexInfo& vertices(int index) const;
  ::graphar::proto::VertexInfo* add_vertices();
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>& vertices() const;
  // repeated .graphar.proto.EdgeInfo edges = 3 [json_name = "edges"];
  int edges_size() const;
  private:
  int _internal_edges_size() const;

  public:
  void clear_edges() ;
  ::graphar::proto::EdgeInfo* mutable_edges(int index);
  ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>* mutable_edges();

  private:
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>& _internal_edges() const;
  ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>* _internal_mutable_edges();
  public:
  const ::graphar::proto::EdgeInfo& edges(int index) const;
  ::graphar::proto::EdgeInfo* add_edges();
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>& edges() const;
  // repeated .graphar.proto.GraphInfo.KeyValue key_value_metadata = 6 [json_name = "keyValueMetadata"];
  int key_value_metadata_size() const;
  private:
  int _internal_key_value_metadata_size() const;

  public:
  void clear_key_value_metadata() ;
  ::graphar::proto::GraphInfo_KeyValue* mutable_key_value_metadata(int index);
  ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>* mutable_key_value_metadata();

  private:
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>& _internal_key_value_metadata() const;
  ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>* _internal_mutable_key_value_metadata();
  public:
  const ::graphar::proto::GraphInfo_KeyValue& key_value_metadata(int index) const;
  ::graphar::proto::GraphInfo_KeyValue* add_key_value_metadata();
  const ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>& key_value_metadata() const;
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string prefix = 4 [json_name = "prefix"];
  void clear_prefix() ;
  const std::string& prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* value);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // optional .graphar.proto.GraphInfo.Statistics statistics = 5 [json_name = "statistics"];
  bool has_statistics() const;
  void clear_statistics() ;
  const ::graphar::proto::GraphInfo_Statistics& statistics() const;
  PROTOBUF_NODISCARD ::graphar::proto::GraphInfo_Statistics* release_statistics();
  ::graphar::proto::GraphInfo_Statistics* mutable_statistics();
  void set_allocated_statistics(::graphar::proto::GraphInfo_Statistics* value);
  void unsafe_arena_set_allocated_statistics(::graphar::proto::GraphInfo_Statistics* value);
  ::graphar::proto::GraphInfo_Statistics* unsafe_arena_release_statistics();

  private:
  const ::graphar::proto::GraphInfo_Statistics& _internal_statistics() const;
  ::graphar::proto::GraphInfo_Statistics* _internal_mutable_statistics();

  public:
  // @@protoc_insertion_point(class_scope:graphar.proto.GraphInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GraphInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GraphInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::graphar::proto::VertexInfo > vertices_;
    ::google::protobuf::RepeatedPtrField< ::graphar::proto::EdgeInfo > edges_;
    ::google::protobuf::RepeatedPtrField< ::graphar::proto::GraphInfo_KeyValue > key_value_metadata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    ::graphar::proto::GraphInfo_Statistics* statistics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GraphInfo_Statistics

// int64 num_vertices = 1 [json_name = "numVertices"];
inline void GraphInfo_Statistics::clear_num_vertices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_vertices_ = ::int64_t{0};
}
inline ::int64_t GraphInfo_Statistics::num_vertices() const {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.Statistics.num_vertices)
  return _internal_num_vertices();
}
inline void GraphInfo_Statistics::set_num_vertices(::int64_t value) {
  _internal_set_num_vertices(value);
  // @@protoc_insertion_point(field_set:graphar.proto.GraphInfo.Statistics.num_vertices)
}
inline ::int64_t GraphInfo_Statistics::_internal_num_vertices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_vertices_;
}
inline void GraphInfo_Statistics::_internal_set_num_vertices(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_vertices_ = value;
}

// int64 num_edges = 2 [json_name = "numEdges"];
inline void GraphInfo_Statistics::clear_num_edges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_edges_ = ::int64_t{0};
}
inline ::int64_t GraphInfo_Statistics::num_edges() const {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.Statistics.num_edges)
  return _internal_num_edges();
}
inline void GraphInfo_Statistics::set_num_edges(::int64_t value) {
  _internal_set_num_edges(value);
  // @@protoc_insertion_point(field_set:graphar.proto.GraphInfo.Statistics.num_edges)
}
inline ::int64_t GraphInfo_Statistics::_internal_num_edges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_edges_;
}
inline void GraphInfo_Statistics::_internal_set_num_edges(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_edges_ = value;
}

// -------------------------------------------------------------------

// GraphInfo_KeyValue

// string key = 1 [json_name = "key"];
inline void GraphInfo_KeyValue::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GraphInfo_KeyValue::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.KeyValue.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphInfo_KeyValue::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.GraphInfo.KeyValue.key)
}
inline std::string* GraphInfo_KeyValue::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.KeyValue.key)
  return _s;
}
inline const std::string& GraphInfo_KeyValue::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void GraphInfo_KeyValue::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GraphInfo_KeyValue::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GraphInfo_KeyValue::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.GraphInfo.KeyValue.key)
  return _impl_.key_.Release();
}
inline void GraphInfo_KeyValue::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.GraphInfo.KeyValue.key)
}

// string value = 2 [json_name = "value"];
inline void GraphInfo_KeyValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& GraphInfo_KeyValue::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.KeyValue.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphInfo_KeyValue::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.GraphInfo.KeyValue.value)
}
inline std::string* GraphInfo_KeyValue::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.KeyValue.value)
  return _s;
}
inline const std::string& GraphInfo_KeyValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void GraphInfo_KeyValue::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* GraphInfo_KeyValue::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* GraphInfo_KeyValue::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.GraphInfo.KeyValue.value)
  return _impl_.value_.Release();
}
inline void GraphInfo_KeyValue::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.GraphInfo.KeyValue.value)
}

// -------------------------------------------------------------------

// GraphInfo

// string name = 1 [json_name = "name"];
inline void GraphInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GraphInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.GraphInfo.name)
}
inline std::string* GraphInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.name)
  return _s;
}
inline const std::string& GraphInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void GraphInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GraphInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GraphInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.GraphInfo.name)
  return _impl_.name_.Release();
}
inline void GraphInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.GraphInfo.name)
}

// repeated .graphar.proto.VertexInfo vertices = 2 [json_name = "vertices"];
inline int GraphInfo::_internal_vertices_size() const {
  return _internal_vertices().size();
}
inline int GraphInfo::vertices_size() const {
  return _internal_vertices_size();
}
inline ::graphar::proto::VertexInfo* GraphInfo::mutable_vertices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.vertices)
  return _internal_mutable_vertices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>* GraphInfo::mutable_vertices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:graphar.proto.GraphInfo.vertices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_vertices();
}
inline const ::graphar::proto::VertexInfo& GraphInfo::vertices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.vertices)
  return _internal_vertices().Get(index);
}
inline ::graphar::proto::VertexInfo* GraphInfo::add_vertices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::graphar::proto::VertexInfo* _add = _internal_mutable_vertices()->Add();
  // @@protoc_insertion_point(field_add:graphar.proto.GraphInfo.vertices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>& GraphInfo::vertices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:graphar.proto.GraphInfo.vertices)
  return _internal_vertices();
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>&
GraphInfo::_internal_vertices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vertices_;
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::VertexInfo>*
GraphInfo::_internal_mutable_vertices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.vertices_;
}

// repeated .graphar.proto.EdgeInfo edges = 3 [json_name = "edges"];
inline int GraphInfo::_internal_edges_size() const {
  return _internal_edges().size();
}
inline int GraphInfo::edges_size() const {
  return _internal_edges_size();
}
inline ::graphar::proto::EdgeInfo* GraphInfo::mutable_edges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.edges)
  return _internal_mutable_edges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>* GraphInfo::mutable_edges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:graphar.proto.GraphInfo.edges)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_edges();
}
inline const ::graphar::proto::EdgeInfo& GraphInfo::edges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.edges)
  return _internal_edges().Get(index);
}
inline ::graphar::proto::EdgeInfo* GraphInfo::add_edges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::graphar::proto::EdgeInfo* _add = _internal_mutable_edges()->Add();
  // @@protoc_insertion_point(field_add:graphar.proto.GraphInfo.edges)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>& GraphInfo::edges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:graphar.proto.GraphInfo.edges)
  return _internal_edges();
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>&
GraphInfo::_internal_edges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.edges_;
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::EdgeInfo>*
GraphInfo::_internal_mutable_edges() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.edges_;
}

// string prefix = 4 [json_name = "prefix"];
inline void GraphInfo::clear_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& GraphInfo::prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphInfo::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:graphar.proto.GraphInfo.prefix)
}
inline std::string* GraphInfo::mutable_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.prefix)
  return _s;
}
inline const std::string& GraphInfo::_internal_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prefix_.Get();
}
inline void GraphInfo::_internal_set_prefix(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.Set(value, GetArena());
}
inline std::string* GraphInfo::_internal_mutable_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prefix_.Mutable( GetArena());
}
inline std::string* GraphInfo::release_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.GraphInfo.prefix)
  return _impl_.prefix_.Release();
}
inline void GraphInfo::set_allocated_prefix(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefix_.IsDefault()) {
          _impl_.prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.GraphInfo.prefix)
}

// optional .graphar.proto.GraphInfo.Statistics statistics = 5 [json_name = "statistics"];
inline bool GraphInfo::has_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statistics_ != nullptr);
  return value;
}
inline void GraphInfo::clear_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statistics_ != nullptr) _impl_.statistics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::graphar::proto::GraphInfo_Statistics& GraphInfo::_internal_statistics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::graphar::proto::GraphInfo_Statistics* p = _impl_.statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::graphar::proto::GraphInfo_Statistics&>(::graphar::proto::_GraphInfo_Statistics_default_instance_);
}
inline const ::graphar::proto::GraphInfo_Statistics& GraphInfo::statistics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.statistics)
  return _internal_statistics();
}
inline void GraphInfo::unsafe_arena_set_allocated_statistics(::graphar::proto::GraphInfo_Statistics* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statistics_);
  }
  _impl_.statistics_ = reinterpret_cast<::graphar::proto::GraphInfo_Statistics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:graphar.proto.GraphInfo.statistics)
}
inline ::graphar::proto::GraphInfo_Statistics* GraphInfo::release_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::graphar::proto::GraphInfo_Statistics* released = _impl_.statistics_;
  _impl_.statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::graphar::proto::GraphInfo_Statistics* GraphInfo::unsafe_arena_release_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:graphar.proto.GraphInfo.statistics)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::graphar::proto::GraphInfo_Statistics* temp = _impl_.statistics_;
  _impl_.statistics_ = nullptr;
  return temp;
}
inline ::graphar::proto::GraphInfo_Statistics* GraphInfo::_internal_mutable_statistics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.statistics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::graphar::proto::GraphInfo_Statistics>(GetArena());
    _impl_.statistics_ = reinterpret_cast<::graphar::proto::GraphInfo_Statistics*>(p);
  }
  return _impl_.statistics_;
}
inline ::graphar::proto::GraphInfo_Statistics* GraphInfo::mutable_statistics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::graphar::proto::GraphInfo_Statistics* _msg = _internal_mutable_statistics();
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.statistics)
  return _msg;
}
inline void GraphInfo::set_allocated_statistics(::graphar::proto::GraphInfo_Statistics* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.statistics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.statistics_ = reinterpret_cast<::graphar::proto::GraphInfo_Statistics*>(value);
  // @@protoc_insertion_point(field_set_allocated:graphar.proto.GraphInfo.statistics)
}

// repeated .graphar.proto.GraphInfo.KeyValue key_value_metadata = 6 [json_name = "keyValueMetadata"];
inline int GraphInfo::_internal_key_value_metadata_size() const {
  return _internal_key_value_metadata().size();
}
inline int GraphInfo::key_value_metadata_size() const {
  return _internal_key_value_metadata_size();
}
inline void GraphInfo::clear_key_value_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_value_metadata_.Clear();
}
inline ::graphar::proto::GraphInfo_KeyValue* GraphInfo::mutable_key_value_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:graphar.proto.GraphInfo.key_value_metadata)
  return _internal_mutable_key_value_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>* GraphInfo::mutable_key_value_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:graphar.proto.GraphInfo.key_value_metadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_key_value_metadata();
}
inline const ::graphar::proto::GraphInfo_KeyValue& GraphInfo::key_value_metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:graphar.proto.GraphInfo.key_value_metadata)
  return _internal_key_value_metadata().Get(index);
}
inline ::graphar::proto::GraphInfo_KeyValue* GraphInfo::add_key_value_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::graphar::proto::GraphInfo_KeyValue* _add = _internal_mutable_key_value_metadata()->Add();
  // @@protoc_insertion_point(field_add:graphar.proto.GraphInfo.key_value_metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>& GraphInfo::key_value_metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:graphar.proto.GraphInfo.key_value_metadata)
  return _internal_key_value_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>&
GraphInfo::_internal_key_value_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_value_metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::graphar::proto::GraphInfo_KeyValue>*
GraphInfo::_internal_mutable_key_value_metadata() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.key_value_metadata_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace graphar


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_graph_5finfo_2eproto_2epb_2eh
