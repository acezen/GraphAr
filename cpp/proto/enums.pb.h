// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: enums.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_enums_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_enums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_enums_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_enums_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_enums_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace graphar {
namespace proto {
enum DataType : int {
  BOOL = 0,
  INT32 = 1,
  INT64 = 2,
  FLOAT = 3,
  DOUBLE = 4,
  STRING = 5,
  LIST = 6,
  DATE = 7,
  TIMESTAMP = 8,
  TIME = 9,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataType_IsValid(int value);
extern const uint32_t DataType_internal_data_[];
constexpr DataType DataType_MIN = static_cast<DataType>(0);
constexpr DataType DataType_MAX = static_cast<DataType>(9);
constexpr int DataType_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
DataType_descriptor();
template <typename T>
const std::string& DataType_Name(T value) {
  static_assert(std::is_same<T, DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return DataType_Name(static_cast<DataType>(value));
}
template <>
inline const std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool DataType_Parse(absl::string_view name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
      DataType_descriptor(), name, value);
}
enum FileType : int {
  CSV = 0,
  PARQUET = 1,
  ORC = 2,
  JSON = 3,
  AVRO = 4,
  HDF5 = 5,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileType_IsValid(int value);
extern const uint32_t FileType_internal_data_[];
constexpr FileType FileType_MIN = static_cast<FileType>(0);
constexpr FileType FileType_MAX = static_cast<FileType>(5);
constexpr int FileType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
FileType_descriptor();
template <typename T>
const std::string& FileType_Name(T value) {
  static_assert(std::is_same<T, FileType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileType_Name().");
  return FileType_Name(static_cast<FileType>(value));
}
template <>
inline const std::string& FileType_Name(FileType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool FileType_Parse(absl::string_view name, FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileType>(
      FileType_descriptor(), name, value);
}
enum AdjListType : int {
  UNORDERED_BY_SOURCE = 0,
  UNORDERED_BY_TARGET = 1,
  ORDERED_BY_SOURCE = 2,
  ORDERED_BY_TARGET = 3,
  AdjListType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AdjListType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AdjListType_IsValid(int value);
extern const uint32_t AdjListType_internal_data_[];
constexpr AdjListType AdjListType_MIN = static_cast<AdjListType>(0);
constexpr AdjListType AdjListType_MAX = static_cast<AdjListType>(3);
constexpr int AdjListType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AdjListType_descriptor();
template <typename T>
const std::string& AdjListType_Name(T value) {
  static_assert(std::is_same<T, AdjListType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AdjListType_Name().");
  return AdjListType_Name(static_cast<AdjListType>(value));
}
template <>
inline const std::string& AdjListType_Name(AdjListType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AdjListType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AdjListType_Parse(absl::string_view name, AdjListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdjListType>(
      AdjListType_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace graphar


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::graphar::proto::DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::graphar::proto::DataType>() {
  return ::graphar::proto::DataType_descriptor();
}
template <>
struct is_proto_enum<::graphar::proto::FileType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::graphar::proto::FileType>() {
  return ::graphar::proto::FileType_descriptor();
}
template <>
struct is_proto_enum<::graphar::proto::AdjListType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::graphar::proto::AdjListType>() {
  return ::graphar::proto::AdjListType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_enums_2eproto_2epb_2eh
